////
/// @author [Bootstrap 4](https://getbootstrap.com/)
/// @link https://github.com/twbs/bootstrap/blob/v4-dev/scss/mixins/_breakpoints.scss
////


/// Returns the name of the next breakpoint or null for the last breakpoint.
/// @example
///   breakpoint-next(sm)
///   // md
///   sy-breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
///   // md
///   sy-breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
///   // md
/// @param {string} $name                                         - The name of the breakpoint, e.g. `sm`
/// @param {map}    $breakpoints      [$sy-breakpoint]           - The used breakpoint system
/// @param {map}    $breakpoint-names [map-keys($sy-breakpoint)] - The names for the breakpoints
@function sy-breakpoint-next($name, $breakpoints: $sy-breakpoint, $breakpoint-names: map-keys($sy-breakpoint)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


/// Returns the minimum breakpoint width or null for the smallest (first) breakpoint.
/// @example
///   sy-breakpoint-min(sm)
///   // 576px
///   sy-breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
///   // 576px
/// @param {string} $name                          - The name of the breakpoint, e.g. `sm`
/// @param {map}    $breakpoints [$sy-breakpoint] - The used breakpoint system
@function sy-breakpoint-min($name, $breakpoints: $sy-breakpoint) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

/// Maximum breakpoint width. Null for the largest (last) breakpoint.
/// The maximum value is calculated as the minimum of the next one less 0.02px
/// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
/// See [w3.org](https://www.w3.org/TR/mediaqueries-4/#mq-min-max)
/// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
/// See [webkit.org](https://bugs.webkit.org/show_bug.cgi?id=178261)
/// @example
///   sy-breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
///   // 767.98px
/// @param {string} $name                          - The name of the breakpoint, e.g. `sm`
/// @param {map}    $breakpoints [$sy-breakpoint] - The used breakpoint system
@function sy-breakpoint-max($name, $breakpoints: $sy-breakpoint) {
  $next: sy-breakpoint-next($name, $breakpoints);
  @return if($next, sy-breakpoint-min($next, $breakpoints) - .02px, null);
}

/// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
/// Useful for making responsive utilities.
/// @example
///   sy-breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
///   // ""  (Returns a blank string)
///   sy-breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
///   // "-sm"
/// @param {string} $name                          - The name of the breakpoint, e.g. `sm`
/// @param {map}    $breakpoints [$sy-breakpoint] - The used breakpoint system
@function sy-breakpoint-infix($name, $breakpoints: $sy-breakpoint) {
  @return if(sy-breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

/// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
/// Makes the @content apply to the given breakpoint and wider.
/// @param {string} $name                          - The name of the breakpoint, e.g. `sm`
/// @param {map}    $breakpoints [$sy-breakpoint] - The used breakpoint system
@mixin sy-media-breakpoint-up($name, $breakpoints: $sy-breakpoint) {
  $min: sy-breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

/// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
/// Makes the @content apply to the given breakpoint and narrower.
/// @param {string} $name                          - The name of the breakpoint, e.g. `sm`
/// @param {map}    $breakpoints [$sy-breakpoint] - The used breakpoint system
@mixin sy-media-breakpoint-down($name, $breakpoints: $sy-breakpoint) {
  $max: sy-breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

/// Media that spans multiple breakpoint widths.
/// Makes the @content apply between the min and max breakpoints.
/// @param {string} $lower                         - The name of the lower breakpoint, e.g. `sm`
/// @param {string} $upper                         - The name of the upper breakpoint, e.g. `md`
/// @param {map}    $breakpoints [$sy-breakpoint] - The used breakpoint system
@mixin sy-media-breakpoint-between($lower, $upper, $breakpoints: $sy-breakpoint) {
  $min: sy-breakpoint-min($lower, $breakpoints);
  $max: sy-breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include sy-media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include sy-media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

/// Media between the breakpoint's minimum and maximum widths.
/// No minimum for the smallest breakpoint, and no maximum for the largest one.
/// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
/// @param {string} $name                          - The name of the breakpoint, e.g. `sm`
/// @param {map}    $breakpoints [$sy-breakpoint] - The used breakpoint system
@mixin sy-media-breakpoint-only($name, $breakpoints: $sy-breakpoint) {
  $min: sy-breakpoint-min($name, $breakpoints);
  $max: sy-breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include sy-media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include sy-media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}